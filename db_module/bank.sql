-- MySQL Script generated by MySQL Workbench
-- Sat Jun 29 21:59:17 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bank
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bank` ;

-- -----------------------------------------------------
-- Schema bank
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bank` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `bank` ;

-- -----------------------------------------------------
-- Table `bank`.`客户`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`客户` ;

CREATE TABLE IF NOT EXISTS `bank`.`客户` (
  `身份证号` VARCHAR(18) NOT NULL,
  `姓名` VARCHAR(20) NOT NULL,
  `联系电话` VARCHAR(20) NOT NULL,
  `家庭住址` VARCHAR(1024) NOT NULL,
  `联系人姓名` VARCHAR(20) NOT NULL,
  `联系人手机号` VARCHAR(20) NOT NULL,
  `联系人Email` VARCHAR(100) NOT NULL,
  `联系人与客户关系` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`身份证号`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`支行`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`支行` ;

CREATE TABLE IF NOT EXISTS `bank`.`支行` (
  `名字` VARCHAR(20) NOT NULL,
  `城市` VARCHAR(20) NULL DEFAULT NULL,
  `资产` DECIMAL(15,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`名字`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`银行员工`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`银行员工` ;

CREATE TABLE IF NOT EXISTS `bank`.`银行员工` (
  `身份证号` VARCHAR(18) NOT NULL,
  `姓名` VARCHAR(20) NOT NULL,
  `联系电话` VARCHAR(20) NOT NULL,
  `家庭住址` VARCHAR(1024) NOT NULL,
  `开始工作日期` DATE NOT NULL,
  `支行_名字` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`身份证号`),
  INDEX `fk_银行员工_支行1_idx` (`支行_名字` ASC) VISIBLE,
  CONSTRAINT `fk_银行员工_支行1`
    FOREIGN KEY (`支行_名字`)
    REFERENCES `bank`.`支行` (`名字`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`贷款`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`贷款` ;

CREATE TABLE IF NOT EXISTS `bank`.`贷款` (
  `贷款号` VARCHAR(20) NOT NULL,
  `名字` VARCHAR(20) NOT NULL,
  `金额` DECIMAL(15,2) UNSIGNED NOT NULL,
  `状态` VARCHAR(45) NOT NULL,
  `负责人身份证号` VARCHAR(18) NOT NULL,
  PRIMARY KEY (`贷款号`),
  INDEX `FK_发放` (`名字` ASC) VISIBLE,
  INDEX `FK_贷款负责人_idx` (`负责人身份证号` ASC) VISIBLE,
  CONSTRAINT `FK_发放`
    FOREIGN KEY (`名字`)
    REFERENCES `bank`.`支行` (`名字`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_贷款负责人`
    FOREIGN KEY (`负责人身份证号`)
    REFERENCES `bank`.`银行员工` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`借贷`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`借贷` ;

CREATE TABLE IF NOT EXISTS `bank`.`借贷` (
  `贷款号` VARCHAR(20) NOT NULL,
  `身份证号` VARCHAR(18) NOT NULL,
  PRIMARY KEY (`贷款号`, `身份证号`),
  INDEX `FK_借贷` (`身份证号` ASC) VISIBLE,
  CONSTRAINT `FK_借贷`
    FOREIGN KEY (`身份证号`)
    REFERENCES `bank`.`客户` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_借贷1`
    FOREIGN KEY (`贷款号`)
    REFERENCES `bank`.`贷款` (`贷款号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`账户`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`账户` ;

CREATE TABLE IF NOT EXISTS `bank`.`账户` (
  `账户号` VARCHAR(20) NOT NULL,
  `余额` DECIMAL(15,2) UNSIGNED NOT NULL,
  `开户日期` DATE NOT NULL,
  `支行名` VARCHAR(20) NOT NULL,
  `账户类型` ENUM("支票", "储蓄") NOT NULL,
  `负责人身份证号` VARCHAR(18) NOT NULL,
  PRIMARY KEY (`账户号`),
  INDEX `支行名_idx` (`支行名` ASC) VISIBLE,
  INDEX `FK_账户负责人_idx` (`负责人身份证号` ASC) VISIBLE,
  CONSTRAINT `FK_支行名`
    FOREIGN KEY (`支行名`)
    REFERENCES `bank`.`支行` (`名字`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `FK_账户负责人`
    FOREIGN KEY (`负责人身份证号`)
    REFERENCES `bank`.`银行员工` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`储蓄账户`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`储蓄账户` ;

CREATE TABLE IF NOT EXISTS `bank`.`储蓄账户` (
  `账户号` VARCHAR(20) NOT NULL,
  `利率` DECIMAL(4,2) UNSIGNED NOT NULL,
  `货币类型` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`账户号`),
  CONSTRAINT `FK_储蓄型`
    FOREIGN KEY (`账户号`)
    REFERENCES `bank`.`账户` (`账户号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`储蓄唯一性表`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`储蓄唯一性表` ;

CREATE TABLE IF NOT EXISTS `bank`.`储蓄唯一性表` (
  `账户号` VARCHAR(20) NOT NULL,
  `身份证号` VARCHAR(18) NOT NULL,
  `名字` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`身份证号`, `名字`),
  INDEX `FK_储蓄唯一性表` (`账户号` ASC) VISIBLE,
  INDEX `FK_储蓄唯一性表2` (`名字` ASC) VISIBLE,
  CONSTRAINT `FK_储蓄唯一性表`
    FOREIGN KEY (`账户号`)
    REFERENCES `bank`.`储蓄账户` (`账户号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_储蓄唯一性表1`
    FOREIGN KEY (`身份证号`)
    REFERENCES `bank`.`客户` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_储蓄唯一性表2`
    FOREIGN KEY (`名字`)
    REFERENCES `bank`.`支行` (`名字`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`拥有账户`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`拥有账户` ;

CREATE TABLE IF NOT EXISTS `bank`.`拥有账户` (
  `身份证号` VARCHAR(18) NOT NULL,
  `账户号` VARCHAR(20) NOT NULL,
  `最近访问日期` DATE NOT NULL,
  PRIMARY KEY (`身份证号`, `账户号`),
  INDEX `FK_拥有账户号_idx` (`账户号` ASC) VISIBLE,
  CONSTRAINT `FK_拥有支票账户`
    FOREIGN KEY (`身份证号`)
    REFERENCES `bank`.`客户` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_拥有账户号`
    FOREIGN KEY (`账户号`)
    REFERENCES `bank`.`账户` (`账户号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`支票账户`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`支票账户` ;

CREATE TABLE IF NOT EXISTS `bank`.`支票账户` (
  `账户号` VARCHAR(20) NOT NULL,
  `透支余额` DECIMAL(15,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`账户号`),
  CONSTRAINT `FK_支票型`
    FOREIGN KEY (`账户号`)
    REFERENCES `bank`.`账户` (`账户号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`支票唯一性表`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`支票唯一性表` ;

CREATE TABLE IF NOT EXISTS `bank`.`支票唯一性表` (
  `账户号` VARCHAR(20) NOT NULL,
  `身份证号` VARCHAR(18) NOT NULL,
  `名字` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`身份证号`, `名字`),
  INDEX `FK_支票唯一性表1` (`账户号` ASC) VISIBLE,
  INDEX `FK_支票唯一性表2` (`名字` ASC) VISIBLE,
  CONSTRAINT `FK_支票唯一性表`
    FOREIGN KEY (`身份证号`)
    REFERENCES `bank`.`客户` (`身份证号`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_支票唯一性表1`
    FOREIGN KEY (`账户号`)
    REFERENCES `bank`.`支票账户` (`账户号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT,
  CONSTRAINT `FK_支票唯一性表2`
    FOREIGN KEY (`名字`)
    REFERENCES `bank`.`支行` (`名字`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bank`.`款项`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank`.`款项` ;

CREATE TABLE IF NOT EXISTS `bank`.`款项` (
  `款项号` VARCHAR(10) NOT NULL,
  `贷款号` VARCHAR(20) NOT NULL,
  `日期` DATE NOT NULL,
  `金额` DECIMAL(15,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`款项号`),
  INDEX `FK_包含款项` (`贷款号` ASC) VISIBLE,
  CONSTRAINT `FK_包含款项`
    FOREIGN KEY (`贷款号`)
    REFERENCES `bank`.`贷款` (`贷款号`)
    ON DELETE CASCADE
    ON UPDATE RESTRICT)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `bank` ;

-- -----------------------------------------------------
-- procedure subbank_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`subbank_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `subbank_add` (IN name varchar(20), IN city varchar(20), IN deposite decimal(15,2))
BEGIN
	insert into 支行 (名字, 城市, 资产) values(name, city, deposite);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure subbank_delete
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`subbank_delete`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `subbank_delete` (IN name varchar(20))
BEGIN
	delete from 支行 where 名字=name;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure subbank_update
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`subbank_update`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `subbank_update` (IN oldname varchar(20), IN newname varchar(20), IN city varchar(20), IN deposite decimal(15,2))
BEGIN
	update 支行 set 名字=newname, 城市=city, 资产=deposite
    where 名字=oldname;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure employee_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`employee_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `employee_add` (IN num varchar(18), IN name varchar(20), IN phone varchar(20),
IN place varchar(1024), IN workdate DATE, IN zhname varchar(20))
BEGIN
	insert into 银行员工 values (num, name, phone, place, workdate, zhname);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure employee_delete
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`employee_delete`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `employee_delete` (IN num varchar(18))
BEGIN
	delete from 银行员工 where 身份证号=num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure employee_update
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`employee_update`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `employee_update` (IN num varchar(18), IN name varchar(20), IN phone varchar(20),
IN place varchar(1024), IN workdate DATE, IN zhname varchar(20))
BEGIN
	update 银行员工 set 姓名=name, 联系电话=phone, 家庭住址=place,
    开始工作日期=workdate, 支行_名字=zhname
    where 身份证号=num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure client_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`client_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `client_add` (IN num varchar(18), IN name varchar(20), IN phone varchar(20),
IN place varchar(1024), IN cname varchar(20), IN cphone varchar(20), IN cemail varchar(100),
IN rel varchar(10))
BEGIN
	insert into 客户 values(num, name, phone, place, cname, cphone, cemail, rel);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure client_delete
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`client_delete`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `client_delete` (IN num varchar(18))
BEGIN
	delete from 客户 where 身份证号=num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure client_update
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`client_update`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `client_update` (IN num varchar(18), IN name varchar(20), IN phone varchar(20),
IN place varchar(1024), IN cname varchar(20), IN cphone varchar(20), IN cemail varchar(100),
IN rel varchar(10))
BEGIN
	update 客户 set 姓名=name, 联系电话=phone, 家庭住址=place, 联系人姓名=cname,
    联系人手机号=cphone, 联系人Email=cemail, 联系人与客户关系=rel
    where 身份证号=num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure account_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`account_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `account_add` (IN num varchar(20), IN deposite decimal(15,2), IN opendate DATE,
IN zhname varchar(20), IN class varchar(10), IN manager varchar(18), IN rate decimal(4,2), IN curclass varchar(20),
IN zpdeposite decimal(15,2), OUT err binary)
BEGIN
	
    if class = '储蓄' then
		insert into 账户 values(num, deposite, opendate, zhname, class, manager);
		insert into 储蓄账户 values(num, rate, curclass);
        set err=0;
    elseif class = '支票' then
		insert into 账户 values(num, deposite, opendate, zhname, class, manager);
		insert into 支票账户 values(num, zpdeposite);
        set err=0;
	else
		set err=1;
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure account_delete
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`account_delete`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `account_delete` (IN num varchar(20))
BEGIN
	delete from 账户 where 账户号=num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure account_update
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`account_update`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `account_update` (IN id varchar(18), IN num varchar(20), IN deposite decimal(15,2), IN opendate DATE,
IN zhname varchar(20), IN class1 varchar(10), IN manager varchar(20), IN rate decimal(4,2), IN curclass varchar(20),
IN zpdeposite decimal(15,2))
BEGIN
	declare change_date DATE;
    declare class varchar(10);
    declare old_zhname varchar(20);
    select date_format(now(),'%Y-%m-%d') into change_date;
    select 账户类型 into class from 账户 where 账户号=num;
    select 支行名 into old_zhname from 账户 where 账户号=num;
    if class = '储蓄' then
		update 账户 set 余额=deposite, 开户日期=opendate,  负责人身份证号=manager
        where 账户号=num;
		update 储蓄账户 set 利率=rate, 货币类型=curclass
        where 账户号=num;
        update 拥有账户 set 最近访问日期=change_date 
        where 账户号=num and 身份证号=id;
    elseif class = '支票' then
		update 账户 set 余额=deposite, 开户日期=opendate,  负责人身份证号=manager
        where 账户号=num;
		update 支票账户 set 透支余额=zpdeposite
        where 账户号=num;
        update 拥有账户 set 最近访问日期=change_date
        where 账户号=num and 身份证号=id;
	end if;
    if class!=class1 then
		signal sqlstate '45000'
		set message_text = '账户类型不可更改';
	end if;
    if zhname!=old_zhname then
		signal sqlstate '45000'
		set message_text = '账户所在支行不可更改';
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loan_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`loan_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `loan_add` (IN num varchar(20), IN zhname varchar(20), IN amount decimal(15,2),
IN state varchar(45), IN manager varchar(18))
BEGIN
	insert into 贷款 values(num, zhname, amount, state, manager);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loan_delete
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`loan_delete`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `loan_delete` (IN num varchar(20), OUT err binary)
BEGIN
	declare state varchar(45);
	declare cur cursor for select 状态 from 贷款 where 贷款号=num;
    open cur;
    fetch cur into state;
    if state = '发放中' then
		set err=1;
	else
		set err=0;
        delete from 贷款 where 贷款号=num;
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure fund_add
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`fund_add`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `fund_add` (IN num varchar(10), IN dknum varchar(20), IN funddate DATE,
IN amount decimal(15,2), OUT err binary)
BEGIN
declare money_dk decimal(15,2);
declare money_kx decimal(15,2);
select 金额 into money_dk from 贷款 where 贷款号 = dknum;
select SUM(金额) into money_kx from 款项 where 贷款号 = dknum;
if money_kx is null then
	set money_kx = 0;
else set money_kx = money_kx + amount;
end if;

if money_kx <= money_dk then
	insert into 款项 values(num, dknum, funddate, amount);
	set err = 0;
else
	set err = 1;
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure own_account
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`own_account`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `own_account` (IN id varchar(18), IN num varchar(20))
BEGIN
	declare zhname varchar(20);
    declare class varchar(10);
    declare open_date DATE;
    select date_format(now(),'%Y-%m-%d') into open_date;
    select 支行名 into zhname from 账户 where 账户号=num;
    select 账户类型 into class from 账户 where 账户号=num;
    insert into 拥有账户 values(id, num, open_date);
    if class = "储蓄" then
		insert into 储蓄唯一性表 values(num, id, zhname);
	else
		insert into 支票唯一性表 values(num, id, zhname);
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure take_loan
-- -----------------------------------------------------

USE `bank`;
DROP procedure IF EXISTS `bank`.`take_loan`;

DELIMITER $$
USE `bank`$$
CREATE PROCEDURE `take_loan` (IN num varchar(20), IN id varchar(18))
BEGIN
	insert into 借贷 values(num, id);
END$$

DELIMITER ;
USE `bank`;

DELIMITER $$

USE `bank`$$
DROP TRIGGER IF EXISTS `bank`.`账户_AFTER_INSERT` $$
USE `bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bank`.`账户_AFTER_INSERT` AFTER INSERT ON `账户` FOR EACH ROW
BEGIN
	update 支行 set 资产 = 资产 + NEW.余额 where 名字 = NEW.支行名;
END$$


USE `bank`$$
DROP TRIGGER IF EXISTS `bank`.`账户_AFTER_UPDATE` $$
USE `bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bank`.`账户_AFTER_UPDATE` AFTER UPDATE ON `账户` FOR EACH ROW
BEGIN
	update 支行 set 资产 = 资产 - OLD.余额 where 名字 = OLD.支行名;
    update 支行 set 资产 = 资产 + NEW.余额 where 名字 = NEW.支行名;
END$$


USE `bank`$$
DROP TRIGGER IF EXISTS `bank`.`账户_AFTER_DELETE` $$
USE `bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bank`.`账户_AFTER_DELETE` AFTER DELETE ON `账户` FOR EACH ROW
BEGIN
	update 支行 set 资产 = 资产 - OLD.余额 where 名字 = OLD.支行名;
END$$


USE `bank`$$
DROP TRIGGER IF EXISTS `bank`.`款项_AFTER_INSERT` $$
USE `bank`$$
CREATE DEFINER = CURRENT_USER TRIGGER `bank`.`款项_AFTER_INSERT` AFTER INSERT ON `款项` FOR EACH ROW
BEGIN
declare money_1 decimal;
declare money_2 decimal;
declare name varchar(20);
select SUM(金额) into money_1 from 款项 where 贷款号 = NEW.贷款号;
select  金额 into money_2 from 贷款 where 贷款号 = NEW.贷款号;
if money_1 >= money_2 then
	update 贷款 set 状态 = '已全部发放' where 贷款号 = NEW.贷款号;
else 
	update 贷款 set 状态 = '发放中' where 贷款号 = NEW.贷款号;
end if;
select 名字 into name from 贷款 where 贷款号 = NEW.贷款号; 
update 支行 set 资产 = 资产 - NEW.金额 where 名字 = name;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `bank`.`客户`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`客户` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `联系人姓名`, `联系人手机号`, `联系人Email`, `联系人与客户关系`) VALUES ('0001', '孙文鹏', '16885885436', '中国科学技术大学东区', '孙武鹏', '16332332333', '333@qq.com', '文武');
INSERT INTO `bank`.`客户` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `联系人姓名`, `联系人手机号`, `联系人Email`, `联系人与客户关系`) VALUES ('0002', '苏文治', '13876542345', '中国科学技术大学西区', '苏武治', '13765664655', '555@pp.com', '笔刀');
INSERT INTO `bank`.`客户` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `联系人姓名`, `联系人手机号`, `联系人Email`, `联系人与客户关系`) VALUES ('0003', '归舒睿', '13323332333', '中国科学技术大学中区', '归淑睿', '13365765768', '777@gg.com', '男女');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`支行`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`支行` (`名字`, `城市`, `资产`) VALUES ('龙兴', '龙兴', 1000000);
INSERT INTO `bank`.`支行` (`名字`, `城市`, `资产`) VALUES ('庞德', '庞德', 1000000);

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`银行员工`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`银行员工` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `开始工作日期`, `支行_名字`) VALUES ('1001', '王经理', '16666666666', '中国科学院大学', '2019-01-01', '龙兴');
INSERT INTO `bank`.`银行员工` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `开始工作日期`, `支行_名字`) VALUES ('1002', '刘员工', '13838383838', '中国人民大学', '2019-04-01', '龙兴');
INSERT INTO `bank`.`银行员工` (`身份证号`, `姓名`, `联系电话`, `家庭住址`, `开始工作日期`, `支行_名字`) VALUES ('1003', '吴经理', '18787288787', '中国邮电大学', '2018-01-01', '庞德');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`贷款`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`贷款` (`贷款号`, `名字`, `金额`, `状态`, `负责人身份证号`) VALUES ('DK01', '庞德', 10000, '发放中', '1001');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`借贷`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`借贷` (`贷款号`, `身份证号`) VALUES ('DK01', '0001');
INSERT INTO `bank`.`借贷` (`贷款号`, `身份证号`) VALUES ('DK01', '0003');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`账户`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`账户` (`账户号`, `余额`, `开户日期`, `支行名`, `账户类型`, `负责人身份证号`) VALUES ('CX01', 300000.8, '2018-03-16', '龙兴', '储蓄', '1001');
INSERT INTO `bank`.`账户` (`账户号`, `余额`, `开户日期`, `支行名`, `账户类型`, `负责人身份证号`) VALUES ('CX02', 685732.9, '2018-05-05', '龙兴', '储蓄', '1002');
INSERT INTO `bank`.`账户` (`账户号`, `余额`, `开户日期`, `支行名`, `账户类型`, `负责人身份证号`) VALUES ('CX03', 483758.2, '2018-11-19', '庞德', '储蓄', '1003');
INSERT INTO `bank`.`账户` (`账户号`, `余额`, `开户日期`, `支行名`, `账户类型`, `负责人身份证号`) VALUES ('ZP01', 0, '2018-01-01', '庞德', '支票', '1001');
INSERT INTO `bank`.`账户` (`账户号`, `余额`, `开户日期`, `支行名`, `账户类型`, `负责人身份证号`) VALUES ('ZP02', 3000, '2019-01-01', '龙兴', '支票', '1002');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`储蓄账户`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`储蓄账户` (`账户号`, `利率`, `货币类型`) VALUES ('CX01', 0.03, 'AUD');
INSERT INTO `bank`.`储蓄账户` (`账户号`, `利率`, `货币类型`) VALUES ('CX02', 0.04, 'USD');
INSERT INTO `bank`.`储蓄账户` (`账户号`, `利率`, `货币类型`) VALUES ('CX03', 0.05, 'USD');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`储蓄唯一性表`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`储蓄唯一性表` (`账户号`, `身份证号`, `名字`) VALUES ('CX01', '0001', '龙兴');
INSERT INTO `bank`.`储蓄唯一性表` (`账户号`, `身份证号`, `名字`) VALUES ('CX02', '0002', '龙兴');
INSERT INTO `bank`.`储蓄唯一性表` (`账户号`, `身份证号`, `名字`) VALUES ('CX03', '0002', '庞德');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`拥有账户`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`拥有账户` (`身份证号`, `账户号`, `最近访问日期`) VALUES ('0001', 'CX01', '2019-01-01');
INSERT INTO `bank`.`拥有账户` (`身份证号`, `账户号`, `最近访问日期`) VALUES ('0001', 'ZP01', '2019-01-01');
INSERT INTO `bank`.`拥有账户` (`身份证号`, `账户号`, `最近访问日期`) VALUES ('0002', 'CX02', '2019-01-01');
INSERT INTO `bank`.`拥有账户` (`身份证号`, `账户号`, `最近访问日期`) VALUES ('0002', 'CX03', '2019-01-01');
INSERT INTO `bank`.`拥有账户` (`身份证号`, `账户号`, `最近访问日期`) VALUES ('0003', 'ZP02', '2019-01-01');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`支票账户`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`支票账户` (`账户号`, `透支余额`) VALUES ('ZP01', 50000);
INSERT INTO `bank`.`支票账户` (`账户号`, `透支余额`) VALUES ('ZP02', 30000);

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`支票唯一性表`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`支票唯一性表` (`账户号`, `身份证号`, `名字`) VALUES ('ZP01', '0001', '庞德');
INSERT INTO `bank`.`支票唯一性表` (`账户号`, `身份证号`, `名字`) VALUES ('ZP02', '0003', '龙兴');

COMMIT;


-- -----------------------------------------------------
-- Data for table `bank`.`款项`
-- -----------------------------------------------------
START TRANSACTION;
USE `bank`;
INSERT INTO `bank`.`款项` (`款项号`, `贷款号`, `日期`, `金额`) VALUES ('DK01KX01', 'DK01', '2018-05-01', 5000);
INSERT INTO `bank`.`款项` (`款项号`, `贷款号`, `日期`, `金额`) VALUES ('DK01KX02', 'DK01', '2018-10-01', 5000);

COMMIT;

